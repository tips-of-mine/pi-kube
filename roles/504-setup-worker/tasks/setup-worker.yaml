---
- name: Install packages [socat] [conntrack] [ipset]
  package:
    name: ["socat", "conntrack", "ipset"]
    state: latest

- name: Download Kubernetes node binaries
  unarchive:
    src: https://dl.k8s.io/{{kubernetes_release}}/kubernetes-node-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    creates: /usr/local/bin/kubernetes/node/bin/kubelet
  when: 
  - ansible_fqdn in groups['workers']
  - ansible_fqdn not in groups['masters']
- name: Create kubelet service
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  notify:
    - restart kubelet

- name: Create kubelet config file
  template:
    src: kubelet-config.yaml.j2
    dest: /etc/kubernetes/kubelet-config.yaml
  notify:
    - restart kubelet

- name: Create /etc/kubernetes/manifests directory
  file:
    path: /etc/kubernetes/manifests
    state: directory

- name: Create kubelet kubeconfig file
  copy:
    src: "{{ data_path }}/certificates/configs/kubelet/{{ ansible_fqdn }}/kubelet.config"
    dest: /etc/kubernetes/manifests/kubelet.conf
  notify:
    - restart kubelet

- name: Create kube-proxy service
  template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service
  notify:
    - restart kube-proxy

- name: Create kube-proxy config file
  template:
    src: kube-proxy-config.yaml.j2
    dest: /etc/kubernetes/kube-proxy-config.yaml
  notify:
    - restart kube-proxy

- name: Import proxier kubeconfig
  copy:
    src: "{{ data_path }}/certificates/configs/proxier/proxier.conf"
    dest: /etc/kubernetes/manifests/proxier.conf
  notify:
    - restart kube-proxy
    
- name: Start kubelet and kube-proxy services
  systemd:
    state: started
    daemon_reload: yes
    enabled: yes
    name: "{{ item }}"
  with_items:
    - kubelet
    - kube-proxy
